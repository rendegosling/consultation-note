version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: linux/arm64
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.local
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    platform: linux/arm64
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env.local
    environment:
      - NODE_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app_network

  postgres:
    image: postgres:16-alpine
    platform: linux/arm64
    env_file:
      - ./backend/.env.local
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d consultation_note"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  localstack:
    image: localstack/localstack:3.0
    platform: linux/arm64
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
      - PERSISTENCE=0
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge