services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: linux/arm64
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.local
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    platform: linux/arm64
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env.local
    environment:
      - NODE_ENV=development
    depends_on:
      terraform:
        condition: service_completed_successfully
      localstack:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,dynamodb,lambda,logs,cloudwatch,iam,sts,dynamodbstreams,ssm,logs,sqs
      - DEBUG=1
      - LAMBDA_DOCKER_FLAGS=-e LOCALSTACK_INIT_LOG_LEVEL=debug
      - DEFAULT_REGION=ap-southeast-2
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  s3-init:
    image: amazon/aws-cli
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-southeast-2
      - AWS_ENDPOINT_URL=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
    entrypoint: [""]
    command: >
      sh -c "
        aws --endpoint-url=http://localstack:4566 s3 ls s3://lambda-artifacts 2>/dev/null || 
        aws --endpoint-url=http://localstack:4566 s3 mb s3://lambda-artifacts
      "
    networks:
      - app_network

  lambda-builder:
    image: node:20-alpine
    volumes:
      - ./backend:/app
      - ./backend/node_modules:/app/node_modules
    working_dir: /app
    env_file:
      - ./backend/.env.local
    depends_on:
      s3-init:
        condition: service_completed_successfully
    command: >
      /bin/sh -c '
        echo "ðŸ”§ Building Lambdas..." &&
        npm install --silent &&
        apk add --no-cache --quiet zip aws-cli unzip &&
        
        # Loop through Lambda directories, excluding dist
        for lambda in $$(ls -d src/lambdas/*/ | grep -v "/dist/"); do
          lambda_name=$$(basename "$${lambda%/}") &&
          echo "ðŸ“¦ Building Lambda: $$lambda_name" &&
          echo "ðŸ“‚ Path: $$lambda" &&
          
          # Build Lambda
          npm run build:lambda "$$lambda_name" &&
          
          # Convert directory name to S3 key format
          s3_key=$$(echo "$$lambda_name" | tr "." "-") &&
          echo "ðŸŽ¯ S3 Key: $$s3_key.zip" &&
          
          # Verify and upload
          cd "src/lambdas/$$lambda_name/dist" &&
          echo "ðŸ“¦ Lambda package contents for $$lambda_name:" &&
          unzip -l "$$lambda_name.zip" | grep lambda.js &&
          
          # Upload to S3
          aws --endpoint-url=http://localstack:4566 \
            s3 cp "$$lambda_name.zip" \
            "s3://lambda-artifacts/$$s3_key.zip" --quiet &&
          echo "âœ… Uploaded to s3://lambda-artifacts/$$s3_key.zip" &&
          
          cd /app
        done
      '
    networks:
      - app_network

  terraform:
    image: hashicorp/terraform:latest
    volumes:
      - ./terraform:/terraform
    working_dir: /terraform
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-southeast-2
    depends_on:
      localstack:
        condition: service_healthy
      lambda-builder:
        condition: service_completed_successfully
    entrypoint: [""]
    command: >
      sh -c '
        ls -la &&
        terraform init &&
        terraform apply -auto-approve -var-file="dev.tfvars"
      '
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "test -f /terraform/.terraform.lock.hcl"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  frontend_node_modules:

networks:
  app_network:
    driver: bridge